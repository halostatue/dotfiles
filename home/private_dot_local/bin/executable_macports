#! /usr/bin/env bash

set -uo pipefail

tested-on() {
  local build_tools build_version hardware
  product_version="$(sw_vers -productVersion)"
  build_version="$(sw_vers -buildVersion)"
  hardware="$(uname -m)"

  if build_tools="$(xcodebuild -version 2>/dev/null)"; then
    build_tools="$(echo "${build_tools}" | awk 'NR==1 { x=$0 } END { print x" "$NF }')"
  elif build_tools="$(pkgutil --pkg-info=com.apple.pkg.CLTools_Executables)"; then
    build_tools="$(echo "${build_tools}" | awk '/version:/ { print $2 }')"
    build_tools="Command Line Tools ${build_tools}"
  fi

  echo macOS "${product_version}" "${build_version}" "${hardware}"
  echo "${build_tools}"
}

set-port-version() {
  set +e

  local version
  awk '/^version / { print $2; }' "${port[clip]}" >"${port[clip]}.version"
  read -r version <"${port[clip]}.version"
  port[version]="${version}"

  if [[ -n "${port[golang]:-}" ]]; then
    local repo version prefix
    awk '/^go.setup/ { print $2, $3, $4; }' "${port[clip]}" >"${port[clip]}.version"
    read -r repo version prefix <"${port[clip]}.version"

    port[version]="${version}"
    port[tag_url]="https://raw.githubusercontent.com/${repo/github.com\//}/refs/tags/${prefix:-}${version}"
  fi

  if [[ -n "${port[github]:-}" ]]; then
    local owner name version prefix
    awk '/^github.setup/ { print $2, $3, $4, $5; }' "${port[clip]}" >"${port[clip]}.version"
    read -r owner name version prefix <"${port[clip]}.version"

    port[version]="${version}"
    port[tag_url]="https://raw.githubusercontent.com/${owner}/${name}/refs/tags/${prefix:-}${version}"
  fi

  set -e
}

set-port-type() {
  port[file]="${port[path]}/Portfile"

  grep -Eq '^PortGroup\s+golang\s+1\.0' "${port[file]}" && port[golang]=true
  grep -Eq '^PortGroup\s+github\s+1\.0' "${port[file]}" && port[github]=true
  grep -Eq '^cargo.crates' "${port[file]}" && port[needs_crates]=true

  true
}

test-port-lima() {
  limactl info | jq .version -r
}

test-port-passage() {
  local id created tmp
  created=false
  tmp="$(mktemp)"
  rm -f "${tmp}"
  id="$(basename "${tmp}")"

  if ! [[ -f ~/.passage/identities ]]; then
    mkdir -p ~/.passage
    age-keygen -o ~/.passage/identities
    created=true
  fi

  (
    set -x
    passage generate test."${id}"
    passage rm -f test."${id}"
  )

  "${created}" && rm -rf ~/.passage
}

update-port() {
  set -euo pipefail

  local fn branch
  fn="macports update-port"
  local -A port
  local -a port_test
  port_test=()

  port[private]=false
  port[stable]=false

  case "$1" in
  uv)
    port[cargo_lock]=github
    port[category]=devel
    port_test=(uv tool list)
    ;;
  pinact)
    port[category]=security
    port_test=(pinact --help)
    ;;
  jaq)
    port[category]=textproc
    port[cargo_lock]=github
    port_test=(jaq --help)
    ;;
  chezmoi)
    port[stable]=true
    port[category]=sysutils
    port_test=(chezmoi doctor)
    ;;
  mise)
    port[stable]=true
    port[category]=sysutils
    port_test=(mise ls)
    ;;
  viu)
    port[category]=graphics
    port_test=(viu ~/Pictures/garden.jpg)
    ;;
  ruby-build)
    port[stable]=true
    port[category]=ruby
    port_test=(ruby-build --list)
    ;;
  colima)
    port[stable]=true
    port[category]=sysutils
    port_test=(colima status)
    ;;
  lima)
    port[stable]=true
    port[category]=sysutils
    port_test=(test-port-lima)
    ;;
  passage)
    port[category]=security
    port_test=(test-port-passage)
    ;;
  lychee)
    port[category]=devel
    port[cargo_lock]=github
    port_test=(lychee --help)
    ;;
  changie | cocogitto | git-branch-stash | git-bug | git-mediate)
    port[category]=devel
    port[private]=true
    ;;
  git-ce)
    port[category]=devel
    port[private]=true
    port[cargo_lock]=github
    ;;
  git-some-extras | git-stack | git-switch-user | git-task | gitql | jqfmt | licensure)
    port[category]=devel
    port[private]=true
    ;;
  mrml | prr | sol)
    port[category]=devel
    port[private]=true
    ;;
  prql)
    port[category]=devel
    port[private]=true
    port[cargo_lock]=github
    ;;
  typos)
    port[category]=devel
    port[private]=true
    port[cargo_lock]=github
    ;;
  scryer-prolog)
    port[category]=lang
    port[private]=true
    ;;
  selene)
    port[category]=lua
    port[private]=true
    ;;
  chainloop | osv-scanner)
    port[category]=security
    port[private]=true
    ;;
  dunesh)
    port[category]=shells
    port[private]=true
    ;;
  actions-usage | diffoci | dotenv-linter | fish-paket | manifest-tool | massren)
    port[category]=sysutils
    port[private]=true
    ;;
  mquery | pug | terramaid)
    port[category]=sysutils
    port[private]=true
    ;;
  shadowenv)
    port[category]=sysutils
    port[private]=true
    port[cargo_lock]=github
    ;;
  csvquote | htmd-cli | spacer | taplo | titlecase)
    port[category]=textproc
    port[private]=true
    ;;
  vv)
    port[category]=graphics
    port[private]=true
    port_test=(vv ~/Pictures/garden.jpg)
    ;;
  rebels-in-the-sky)
    port[category]=games
    port[crate]=rebels
    port_test=(rebels --version)
    ;;
  zizmor)
    port[category]=security
    port_test=(zizmor -h)
    ;;
  *) : ;;
  esac

  if "${port[unstable]:-false}" && ! [[ "${2:-}" == --force ]]; then
    echo >&2 "${fn}: $1 cannot be updated automatically because of Cargo.lock instability"
    return 1
  fi

  if "${port[private]:-false}"; then
    port[root]="${HOME}/ports"
  else
    port[root]="$(zoxide query macports-ports)"
  fi

  if [[ -z "${port[category]:-}" ]]; then
    local candidate
    candidate="$(shopt -sq nullglob && echo "${port[root]}"/*/"$1"/Portfile)"

    if [[ -n "${candidate}" ]]; then
      candidate="${candidate%/*/*}"
      port[category]="${candidate##*/}"

      echo >&2 "${fn}: port $1: No update procedure."
      echo >&2 "${fn}: port $1: Guessed root category is ${port[category]}."

      read -ra port_test -p "Enter test procedure for port $1 to continue: "

      if ((${#port_test} < 1)); then
        echo >&2 "${fn}: No test procedure provided. Halting."
        return 1
      fi
    fi
  fi

  port[name]="$1"
  port[path]="${port[root]}/${port[category]}/$1"

  cd "${port[root]}"

  branch="$(git main-branch)"
  git switch "${branch}"
  git reup

  set-port-type

  if [[ -n "${2:-}" ]]; then
    seaport clip "${port[name]}" --bump "${2}"
  else
    seaport clip "${port[name]}"
  fi

  port[clip]="$(mktemp)"
  pbpaste >"${port[clip]}"

  set-port-version

  if [[ -z "${port[version]:-}" ]]; then
    echo >&2 "${fn}: port ${port[name]} cannot determine next target version"
    return 1
  fi

  if git log --grep="\\b${port[name]}.\\+${port[version]}" --since "7 days ago" | grep -q .; then
    echo >&2 "${fn}: port ${port[name]}: ${port[version]} has already been merged"
    git log --grep="\\b${port[name]}.\\+${port[version]}" --since "7 days ago" >&2
    return 1
  fi

  if prs="$(gh pr list --search "${port[name]} in:title" -q '(. | length) > 0' --json number)" &&
    [[ "${prs}" == true ]]; then
    echo >&2 "${fn}: port ${port[name]}: ${port[version]} already has an open PR"
    gh pr list --search ruby-build -q 'map("#\(.number) \(.title)") | .[]' --json number,title >&2
    return 1
  fi

  cd "${port[path]}"

  pr_branch="${port[name]}-${port[version]}"
  if ! "${port[private]:-false}"; then
    git switch --create "${pr_branch}" "${branch}"
  fi

  if [[ -n "${port[needs_crates]:-}" ]]; then
    sed '/^cargo.crates/,/^$/d' "${port[clip]}" >"${port[file]}"

    if [[ "${port[cargo_lock]:-crates}" == github ]] && [[ -n "${port[tag_url]:-}" ]]; then
      curl -sSL "${port[tag_url]}/Cargo.lock" -o "${port[clip]}.Cargo.lock"
      crate2port "${port[clip]}.Cargo.lock" >>"${port[file]}"
    else
      crate2port "${port[crate]:-${port[name]}}@${port[version]}" >>"${port[file]}"
    fi
  else
    cp "${port[clip]}" "${port[file]}"
  fi

  git add "${port[file]}"

  if "${port[private]:-false}"; then
    (
      cd "${port[root]}"
      portindex
      git add PortIndex PortIndex.quick
    )
  fi

  git commit -m "${port[name]}: Update to ${port[version]}"

  port[pr]="$(mktemp)"
  prepare-pr "${port[name]}"

  if "${port[private]:-false}"; then
    git push
  else
    if ! [[ -s "${port[pr]}" ]]; then
      echo >&2 "${fn}: port ${port[name]}: Error generating pull request body"
      return 1
    fi

    if "${port[stable]:-false}"; then
      git push origin "${pr_branch}" --set-upstream
    else
      confirm gh pr create --dry-run --fill --body-file "${port[pr]}"
    fi

    gh pr create --fill --body-file "${port[pr]}"

    git switch "${branch}"
  fi

  rm -f "${port[clip]}"* "${port[pr]}"
}

confirm() {
  if ! "${port[stable]:-false}"; then
    "$@"
    read -r -p " Press Ctrl-C to cancel or ENTER to continue"
  fi
}

prepare-pr() (
  port lint
  sudo port install

  "${port[private]:-false}" && return 0

  if (("${#port_test[@]}")); then
    "${port_test[@]}"
  else
    echo >&2 "Cannot prepare public PR without running a port test."
    return 1
  fi

  local description tested_on
  pr_file="${port[pr]:-$(mktemp)}"
  description="$(git log "${branch:-master}".. --format=%B)"
  tested_on="$(tested-on)"

  cat >"${pr_file}" <<INFO
#### Description

${description}

##### Tested on

${tested_on}

##### Verification

Have you

- [x] followed our [Commit Message Guidelines](https://trac.macports.org/wiki/CommitMessages)?
- [x] squashed and [minimized your commits](https://guide.macports.org/#project.github)?
- [x] checked that there aren't other open [pull requests](https://github.com/macports/macports-ports/pulls) for the same change?
- [x] checked your Portfile with \`port lint\`?
- [x] tried a full install with \`sudo port -vst install\`?
- [x] tested basic functionality of all binary files?
INFO

  cat "${pr_file}"
)

trac-get() {
  local url="$1" dir="$2"

  [[ -n "${dir}" ]] || dir=.

  curl "${url}?format=raw" --create-dirs -o "${dir}/$(basename "$1")"
}

trac-patch() {
  local cmd

  while [[ "$1" == -* ]]; do
    [[ "$1" == -- ]] && break

    cmd="${cmd} $1"
    shift
  done

  [[ -n "${cmd}" ]] || cmd="--strip 0"

  trac-get "$@"

  patch "${cmd}" <"$(basename "$1")"
}

update() {
  update-port "$@"
}

declare -a args
args=()

while (($#)); do
  case "$1" in
  --trace) set -x ;;
  *) args+=("$1") ;;
  esac

  shift
done

set -- "${args[@]}"

"$@"
